name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Library and Example
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22, 24]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
            
      - name: Install library dependencies
        run: bun install
        
      - name: Type check library
        run: bun run type-check
        
      - name: Lint library
        run: bun run lint
        
      - name: Test library
        run: bun run test
        
      - name: Build library
        run: bun run build
        
      - name: Install example dependencies
        run: bun run example:install
        
      - name: Type check example
        run: bun run example:type-check
        
      - name: Build example
        run: bun run example:build
        
      - name: Upload library build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: library-dist-node-${{ matrix.node-version }}
          path: dist/
          retention-days: 7
          
      - name: Upload example build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: example-dist-node-${{ matrix.node-version }}
          path: examples/react-example/dist/
          retention-days: 7

  compatibility-test:
    name: React Compatibility Test
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        react-version: ['19']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install library dependencies
        run: bun install
        
      - name: Build library
        run: bun run build
        
      - name: Install example dependencies
        run: bun run example:install
        
      - name: Install React ${{ matrix.react-version }}
        run: |
          cd examples/react-example
          bun add react@${{ matrix.react-version }} react-dom@${{ matrix.react-version }}
          
      - name: Type check with React ${{ matrix.react-version }}
        run: bun run example:type-check
        
      - name: Build example with React ${{ matrix.react-version }}
        run: bun run example:build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run security audit
        run: bun audit
        continue-on-error: true
        
      - name: Install example dependencies
        run: bun run example:install
        
      - name: Run example security audit
        run: |
          cd examples/react-example
          bun audit
        continue-on-error: true

  validate-package:
    name: Validate Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Build library
        run: bun run build
        
      - name: Check package contents
        run: |
          echo "Checking package.json..."
          cat package.json | jq '.main, .module, .types, .files'
          
          echo "Checking dist directory..."
          ls -la dist/
          
          echo "Checking if all required files exist..."
          test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
          test -f dist/index.esm.js || (echo "Missing dist/index.esm.js" && exit 1)
          test -f dist/index.d.ts || (echo "Missing dist/index.d.ts" && exit 1)
          
      - name: Test package installation
        run: |
          # Create a temporary test project
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          
          # Initialize a new project
          echo '{"name": "test-install", "version": "1.0.0"}' > package.json
          
          # Install our built package
          bun add file:${{ github.workspace }}
          
          # Test that we can import the package
          echo "
          import { 
            getPasswordManagerAttributes, 
            PasswordManager, 
            PasswordManagerBehavior 
          } from 'password-manager-autofill-utilities';
          
          const attrs = getPasswordManagerAttributes({
            behavior: PasswordManagerBehavior.IGNORE,
            managers: [PasswordManager.ONE_PASSWORD]
          });
          
          console.log('Package installation test passed!', attrs);
          " > test.js
          
          bun run test.js